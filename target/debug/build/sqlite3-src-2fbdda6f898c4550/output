TARGET = Some("x86_64-unknown-linux-gnu")
OPT_LEVEL = Some("0")
HOST = Some("x86_64-unknown-linux-gnu")
CC_x86_64-unknown-linux-gnu = None
CC_x86_64_unknown_linux_gnu = None
HOST_CC = None
CC = None
CFLAGS_x86_64-unknown-linux-gnu = None
CFLAGS_x86_64_unknown_linux_gnu = None
HOST_CFLAGS = None
CFLAGS = None
CRATE_CC_NO_DEFAULTS = None
DEBUG = Some("true")
CARGO_CFG_TARGET_FEATURE = Some("fxsr,sse,sse2")
running: "cc" "-O0" "-ffunction-sections" "-fdata-sections" "-fPIC" "-g" "-fno-omit-frame-pointer" "-m64" "-Wall" "-Wextra" "-o" "/home/max/rust/clibbix/target/debug/build/sqlite3-src-2fbdda6f898c4550/out/source/sqlite3.o" "-c" "source/sqlite3.c"
cargo:warning=source/sqlite3.c: In function ‘strftimeFunc’:
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:22052:52: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=                       z==zBuf ? SQLITE_TRANSIENT : SQLITE_DYNAMIC);
cargo:warning=                                                    ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3ErrorWithMsg’:
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:30393:54: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=     sqlite3ValueSetStr(db->pErr, -1, z, SQLITE_UTF8, SQLITE_DYNAMIC);
cargo:warning=                                                      ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3VdbeMemSetStr’:
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:75499:15: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=     if( xDel==SQLITE_DYNAMIC ){
cargo:warning=               ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c: In function ‘valueFromExpr’:
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:75905:55: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=       sqlite3ValueSetStr(pVal, -1, zVal, SQLITE_UTF8, SQLITE_DYNAMIC);
cargo:warning=                                                       ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:75948:29: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=                          0, SQLITE_DYNAMIC);
cargo:warning=                             ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3VdbeExec’:
cargo:warning=source/sqlite3.c:91000:38: warning: cast between incompatible function types from ‘int (*)(u32,  void *, void *, void *)’ {aka ‘int (*)(unsigned int,  void *, void *, void *)’} to ‘void (*)(void *, const char *)’ [-Wcast-function-type]
cargo:warning=       void (*x)(void*,const char*) = (void(*)(void*,const char*))db->xTrace;
cargo:warning=                                      ^
cargo:warning=source/sqlite3.c: In function ‘printfFunc’:
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:113251:25: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=                         SQLITE_DYNAMIC);
cargo:warning=                         ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c: In function ‘generateColumnNames’:
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:126515:58: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=         sqlite3VdbeSetColName(v, i, COLNAME_NAME, zName, SQLITE_DYNAMIC);
cargo:warning=                                                          ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c:14137:27: warning: cast between incompatible function types from ‘int (*)(void *)’ to ‘void (*)(void *)’ [-Wcast-function-type]
cargo:warning= #define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3MallocSize)
cargo:warning=                           ^
cargo:warning=source/sqlite3.c:126522:52: note: in expansion of macro ‘SQLITE_DYNAMIC’
cargo:warning=       sqlite3VdbeSetColName(v, i, COLNAME_NAME, z, SQLITE_DYNAMIC);
cargo:warning=                                                    ^~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3InvokeBusyHandler’:
cargo:warning=source/sqlite3.c:156204:12: warning: cast between incompatible function types from ‘int (*)(void *, int)’ to ‘int (*)(void *, int,  sqlite3_file *)’ {aka ‘int (*)(void *, int,  struct sqlite3_file *)’} [-Wcast-function-type]
cargo:warning=     xTra = (int(*)(void*,int,sqlite3_file*))p->xBusyHandler;
cargo:warning=            ^
cargo:warning=source/sqlite3.c: In function ‘sqlite3_busy_timeout’:
cargo:warning=source/sqlite3.c:156282:30: warning: cast between incompatible function types from ‘int (*)(void *, int,  sqlite3_file *)’ {aka ‘int (*)(void *, int,  struct sqlite3_file *)’} to ‘int (*)(void *, int)’ [-Wcast-function-type]
cargo:warning=     sqlite3_busy_handler(db, (int(*)(void*,int))sqliteDefaultBusyCallback,
cargo:warning=                              ^
cargo:warning=source/sqlite3.c: In function ‘sqlite3_trace’:
cargo:warning=source/sqlite3.c:156623:16: warning: cast between incompatible function types from ‘void (*)(void *, const char *)’ to ‘int (*)(u32,  void *, void *, void *)’ {aka ‘int (*)(unsigned int,  void *, void *, void *)’} [-Wcast-function-type]
cargo:warning=   db->xTrace = (int(*)(u32,void*,void*,void*))xTrace;
cargo:warning=                ^
cargo:warning=source/sqlite3.c: In function ‘sqlite3_db_status’:
cargo:warning=source/sqlite3.c:20875:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=       op = SQLITE_DBSTATUS_CACHE_WRITE+1;
cargo:warning=       ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c:20877:5: note: here
cargo:warning=     case SQLITE_DBSTATUS_CACHE_HIT:
cargo:warning=     ^~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3_str_vappendf’:
cargo:warning=source/sqlite3.c:27625:19: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         flag_long = sizeof(char*)==sizeof(i64) ? 2 :
cargo:warning=         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=                      sizeof(char*)==sizeof(long int) ? 1 : 0;
cargo:warning=                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c:27628:7: note: here
cargo:warning=       case etORDINAL:
cargo:warning=       ^~~~
cargo:warning=source/sqlite3.c:27630:19: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         cThousand = 0;
cargo:warning=         ~~~~~~~~~~^~~
cargo:warning=source/sqlite3.c:27632:7: note: here
cargo:warning=       case etDECIMAL:
cargo:warning=       ^~~~
cargo:warning=source/sqlite3.c: In function ‘resolveP2Values’:
cargo:warning=source/sqlite3.c:77052:13: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=           if( pOp->p2!=0 ) p->readOnly = 0;
cargo:warning=             ^
cargo:warning=source/sqlite3.c:77055:9: note: here
cargo:warning=         case OP_AutoCommit:
cargo:warning=         ^~~~
cargo:warning=source/sqlite3.c:77093:26: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         case OP_VFilter: {
cargo:warning=                          ^
cargo:warning=source/sqlite3.c:77102:9: note: here
cargo:warning=         default: {
cargo:warning=         ^~~~~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3VdbeExec’:
cargo:warning=source/sqlite3.c:84544:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=   if( (pIn3->flags & MEM_Null)==0 ) break;
cargo:warning=     ^
cargo:warning=source/sqlite3.c:84578:1: note: here
cargo:warning= case OP_Halt: {
cargo:warning= ^~~~
cargo:warning=source/sqlite3.c:84711:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=   if( pOp->p1>db->aLimit[SQLITE_LIMIT_LENGTH] ){
cargo:warning=     ^
cargo:warning=source/sqlite3.c:84730:1: note: here
cargo:warning= case OP_String: {          /* out2 */
cargo:warning= ^~~~
cargo:warning=source/sqlite3.c:87786:19: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning= case OP_IfNoHope: {     /* jump, in3 */
cargo:warning=                   ^
cargo:warning=source/sqlite3.c:87794:1: note: here
cargo:warning= case OP_NoConflict:     /* jump, in3 */
cargo:warning= ^~~~
cargo:warning=source/sqlite3.c:88710:38: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=   p->aCounter[SQLITE_STMTSTATUS_SORT]++;
cargo:warning=   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
cargo:warning=source/sqlite3.c:88725:1: note: here
cargo:warning= case OP_Rewind: {        /* jump */
cargo:warning= ^~~~
cargo:warning=source/sqlite3.c:90021:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=   pOp->opcode = OP_AggStep1;
cargo:warning=               ^
cargo:warning=source/sqlite3.c:90024:1: note: here
cargo:warning= case OP_AggStep1: {
cargo:warning= ^~~~
cargo:warning=source/sqlite3.c:90893:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=   pOp->opcode += 2;
cargo:warning=   ~~~~~~~~~~~~^~~~
cargo:warning=source/sqlite3.c:90896:1: note: here
cargo:warning= case OP_PureFunc:              /* group */
cargo:warning= ^~~~
cargo:warning=source/sqlite3.c: In function ‘resolveExprStep’:
cargo:warning=source/sqlite3.c:96041:20: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=     case TK_ISNOT: {
cargo:warning=                    ^
cargo:warning=source/sqlite3.c:96057:5: note: here
cargo:warning=     case TK_BETWEEN:
cargo:warning=     ^~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3ExprCodeTarget’:
cargo:warning=source/sqlite3.c:100345:25: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=     case TK_AGG_COLUMN: {
cargo:warning=                         ^
cargo:warning=source/sqlite3.c:100358:5: note: here
cargo:warning=     case TK_COLUMN: {
cargo:warning=     ^~~~
cargo:warning=source/sqlite3.c: In function ‘impliesNotNullRow’:
cargo:warning=source/sqlite3.c:101891:8: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=       if( (pExpr->pLeft->op==TK_COLUMN && IsVirtual(pExpr->pLeft->y.pTab))
cargo:warning=           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=        || (pExpr->pRight->op==TK_COLUMN && IsVirtual(pExpr->pRight->y.pTab))
cargo:warning=        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c:101895:5: note: here
cargo:warning=     default:
cargo:warning=     ^~~~~~~
cargo:warning=source/sqlite3.c: In function ‘fkActionTrigger’:
cargo:warning=source/sqlite3.c:116360:11: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         if( !pChanges ){
cargo:warning=           ^
cargo:warning=source/sqlite3.c:116364:7: note: here
cargo:warning=       default:
cargo:warning=       ^~~~~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3GenerateConstraintChecks’:
cargo:warning=source/sqlite3.c:117819:17: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         onError = OE_Abort;
cargo:warning=                 ^
cargo:warning=source/sqlite3.c:117823:7: note: here
cargo:warning=       case OE_Abort:
cargo:warning=       ^~~~
cargo:warning=source/sqlite3.c:117981:17: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         onError = OE_Abort;
cargo:warning=                 ^
cargo:warning=source/sqlite3.c:117984:7: note: here
cargo:warning=       case OE_Rollback:
cargo:warning=       ^~~~
cargo:warning=source/sqlite3.c:118044:9: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         sqlite3UpsertDoUpdate(pParse, pUpsert, pTab, 0, iDataCur);
cargo:warning=         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c:118048:7: note: here
cargo:warning=       case OE_Ignore: {
cargo:warning=       ^~~~
cargo:warning=source/sqlite3.c:118260:9: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=         sqlite3UpsertDoUpdate(pParse, pUpsert, pTab, pIdx, iIdxCur+ix);
cargo:warning=         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=source/sqlite3.c:118264:7: note: here
cargo:warning=       case OE_Ignore: {
cargo:warning=       ^~~~
cargo:warning=source/sqlite3.c: In function ‘sqlite3GetToken’:
cargo:warning=source/sqlite3.c:153777:9: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=       if( !sqlite3Isdigit(z[1]) )
cargo:warning=         ^
cargo:warning=source/sqlite3.c:153786:5: note: here
cargo:warning=     case CC_DIGIT: {
cargo:warning=     ^~~~
cargo:warning=source/sqlite3.c:153876:9: warning: this statement may fall through [-Wimplicit-fallthrough=]
cargo:warning=       if( z[1]=='\'' ){
cargo:warning=         ^
cargo:warning=source/sqlite3.c:153890:5: note: here
cargo:warning=     case CC_ID: {
cargo:warning=     ^~~~
exit code: 0
AR_x86_64-unknown-linux-gnu = None
AR_x86_64_unknown_linux_gnu = None
HOST_AR = None
AR = None
running: "ar" "crs" "/home/max/rust/clibbix/target/debug/build/sqlite3-src-2fbdda6f898c4550/out/libsqlite3.a" "/home/max/rust/clibbix/target/debug/build/sqlite3-src-2fbdda6f898c4550/out/source/sqlite3.o"
exit code: 0
cargo:rustc-link-lib=static=sqlite3
cargo:rustc-link-search=native=/home/max/rust/clibbix/target/debug/build/sqlite3-src-2fbdda6f898c4550/out
